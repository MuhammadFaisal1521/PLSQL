--Includes its own exception to keep things neat and readable.
--Set up the Loop Killer API
CREATE OR REPLACE PACKAGE loop_killer 
/* 
| Overview: Simple API to make it easier to insert code inside a loop 
|           to check for infinite or out of control loops and kill 
|           them after N iterations. 
| 
|           Raise the infinite_loop_detected exception. 
| 
|           Default "kill after": 1000 iterations 
*/ 
IS 
   c_max_iterations   CONSTANT PLS_INTEGER DEFAULT 1000; 
   e_infinite_loop_detected    EXCEPTION; 
   c_infinite_loop_detected    PLS_INTEGER := -20999; 
   PRAGMA EXCEPTION_INIT (e_infinite_loop_detected, -20999); 
 
   PROCEDURE kill_after (max_iterations_in IN PLS_INTEGER); 
 
   PROCEDURE increment_or_kill (by_in IN PLS_INTEGER DEFAULT 1); 
 
   FUNCTION current_count 
      RETURN PLS_INTEGER; 
END loop_killer;

--Package created.
--Statement 2
--Nothing fancy. Just a matter of burying inside the little API nuisance code that you might write yourself directly into your application code. Much easier to do it once (or have me do it once) and then just call the API elements.
--No Rocket Science Here!
CREATE OR REPLACE PACKAGE BODY loop_killer 
IS 
   g_counter          PLS_INTEGER; 
   g_max_iterations   PLS_INTEGER DEFAULT c_max_iterations; 
 
   PROCEDURE kill_after (max_iterations_in IN PLS_INTEGER) 
   IS 
   BEGIN 
      g_counter := 1; 
      g_max_iterations := NVL (GREATEST (1, max_iterations_in), c_max_iterations); 
   END kill_after; 
 
   PROCEDURE increment_or_kill (by_in IN PLS_INTEGER DEFAULT 1) 
   IS 
      c_message   CONSTANT VARCHAR2 (32767) 
               := 'Your loop exceeded ' || g_max_iterations || ' iterations.'; 
   BEGIN 
      g_counter := g_counter + by_in; 
 
      IF g_max_iterations <= g_counter 
      THEN 
         /* Dual notification: through DBMS_OUTPUT and by raising an exception. */ 
         DBMS_OUTPUT.put_line ('Loop killer failure: ' || c_message); 
         DBMS_OUTPUT.put_line ('Call stack below shows location of problem:'); 
         DBMS_OUTPUT.put_line (DBMS_UTILITY.format_call_stack); 
         raise_application_error (c_infinite_loop_detected 
                                ,    c_message 
                                  || ' Check system output for the call stack.' 
                                 ); 
      END IF; 
   END increment_or_kill; 
 
   FUNCTION current_count RETURN PLS_INTEGER 
   IS 
   BEGIN 
      RETURN g_counter; 
   END current_count; 
END loop_killer;

--Package Body created.
--Statement 3
--That would be a KILLER infinite loop without loop_killer!
--Demonstration of the API
BEGIN 
   loop_killer.kill_after (100); 
 
   LOOP 
      DBMS_OUTPUT.put_line (loop_killer.current_count); 
      loop_killer.increment_or_kill; 
   END LOOP; 
END;